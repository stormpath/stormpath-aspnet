@model Stormpath.Owin.Abstractions.ViewModel.ExtendedLoginViewModel
@using System
@using System.Linq
@using Stormpath.Owin.Abstractions

@{
    ViewBag.Title = "MyLogin";
}

<div class="container custom-container">
    <div class="va-wrapper">
        <div class="view login-view container">
            @if (Stormpath.Owin.Abstractions.ViewModel.ExtendedLoginViewModel.AcceptableStatuses.Any(x => x.Equals(Model.Status, StringComparison.OrdinalIgnoreCase)))
            {
                <div class="box row">
                    <div class="email-password-area col-xs-12 large col-sm-12">
                        <div class="header">
                            @if (Model.Status.Equals("unverified", StringComparison.OrdinalIgnoreCase))
                            {
                                <span>Your account verification email has been sent!</span>
                                    <p>
                                        Before you can log into your account, you need to activate your
                                        account by clicking the link we sent to your inbox.
                                    </p>
                                    <p>Didn't get the email? <a href="@Model.VerifyEmailUri">Click Here</a>.</p>
                                    <br>
                            }
                            @if (Model.Status.Equals("verified", StringComparison.OrdinalIgnoreCase))
                            {
                                <span>Your Account Has Been Verified.</span>
                                    <p>
                                        You may now login.
                                    </p>
                            }
                            @if (Model.Status.Equals("created", StringComparison.OrdinalIgnoreCase))
                            {
                                <span>Your Account Has Been Created.</span>
                                    <p>
                                        You may now login.
                                    </p>
                            }
                            @if (Model.Status.Equals("reset", StringComparison.OrdinalIgnoreCase))
                            {
                                <span>Password Reset Successfully.</span>
                                    <p>
                                        You can now login with your new password.
                                    </p>
                            }
                            @if (Model.Status.Equals("forgot", StringComparison.OrdinalIgnoreCase))
                            {
                                <span>Password Reset Requested.</span>
                                    <p>
                                        If an account exists for the email provided, you will receive an email shortly.
                                    </p>
                            }
                        </div>
                    </div>
                </div>
            }
            <br>
            <div class="box row">
                <div class="email-password-area col-xs-12 large col-sm-12">
                    @* switch col-sm-12 to col-sm-8 if social providers are present *@
                    @if (Model.RegistrationEnabled)
                    {
                        <div class="header">
                            <span>Log In or <a href="@Model.RegisterUri">Create Account</a></span>
                        </div>
                    }
                    else
                    {
                        <div class="header">
                            <span>Log In</span>
                        </div>
                    }
                    @if (Model.Errors.Any())
                    {
                        <div class="alert alert-danger bad-login">
                            @foreach (var error in Model.Errors)
                            {
                                <p>@error</p>
                            }
                        </div>
                    }
                    <form method="post" role="form" class="login-form form-horizontal">
                        @* <input name="_csrf" type="hidden"> *@
                        @foreach (var field in Model.Form.Fields)
                        {
                            <div class="form-group @($"group-{field.Name}")">
                                <label class="col-sm-4">@field.Label</label> @* switch to col-sm-12 if social providers are present *@
                                <div class="col-sm-8">
                                    @* switch to col-sm-12 if social providers are present *@
                                    <input placeholder="@field.Placeholder"
                                           name="@field.Name"
                                           type="@field.Type"
                                           value="@(Model.FormData.Get(field.Name) ?? string.Empty)"
                                           class="form-control"
                                           @(field.Required ? "required" : string.Empty)>
                                </div>
                            </div>
                        }
                        <div>
                            <button type="submit" class="login btn btn-login btn-sp-green">Log In</button>
                        </div>
                    </form>
                </div>
                @* Social provider section *@
            </div>
            @if (Model.VerifyEmailEnabled)
            {
                <a style="float:right" href="@Model.VerifyEmailUri" class="forgot">Resend Verification Email?</a>
            }
            @if (Model.ForgotPasswordEnabled)
            {
                <a style="float:right" href="@Model.ForgotPasswordUri" class="forgot">Forgot Password?</a>
            }

        </div>
    </div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>